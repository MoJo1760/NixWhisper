[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "nixwhisper"
version = "0.1.0"
description = "A privacy-focused, offline speech-to-text dictation system for Linux"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Utilities",
]
dependencies = [
    "torch>=2.0.0",
    "torchaudio>=2.0.0",
    "faster-whisper>=0.9.0",
    "numpy>=1.24.0",
    "sounddevice>=0.4.6",
    "pynput>=1.7.6",
    "pyperclip>=1.8.2",
    "python-xlib>=0.33; sys_platform == 'linux'",
    "pydantic>=1.10.0",
    "click>=8.1.0",
    "pydub>=0.25.1",
    "soundfile>=0.12.1",
]

[project.optional-dependencies]
gui = [
    "PyGObject>=3.42.0; sys_platform == 'linux'",
    "pycairo>=1.23.0; sys_platform == 'linux'",
]
dev = [
    "black>=23.0.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-qt>=4.2.0",
    "build>=0.9.0",
    "twine>=4.0.0",
    "ipython>=8.0.0",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "sphinx-click>=4.4.0",
]

[project.scripts]
nixwhisper = "nixwhisper.__main__:main"
nixwhisper-download-model = "scripts.download_model:main"

[tool.setuptools.package-data]
"nixwhisper.models" = ["base.en/*"]
"scripts" = ["*.py"]

[tool.setuptools.packages.find]
include = ["nixwhisper*", "scripts"]
namespaces = true

[project.urls]
Homepage = "https://github.com/yourusername/nixwhisper"
Documentation = "https://github.com/yourusername/nixwhisper#readme"
Issues = "https://github.com/yourusername/nixwhisper/issues"
Source = "https://github.com/yourusername/nixwhisper"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
python_classes = "Test*"
addopts = "-v --cov=src --cov-report=term-missing"

[tool.coverage.run]
source = ["src"]
omit = ["**/__init__.py", "**/tests/**"]

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_also = [
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
    "raise ValueError",
]

[tool.ruff]
# Enable pycodestyle ("E") and pyflakes ("F") codes by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Allow autofix for all enabled rules (when `--fix`) by default.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.8.
target-version = "py38"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10
